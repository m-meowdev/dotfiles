#+title: Emeowcs Configuwuation
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introduction

This is my first attempt at an Emacs config. I have been going down the Linux rabbithole for the past few months. I finished up a nice, comfortable Neovim config and figured I might as well try out Emacs now. I have no prior Lisp experience, so I'm really learning as I go.

Huge thanks to [[https://youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][System Crafters' "Emacs From Scratch" series]] for giving me a great starting point!

#+begin_src emacs-lisp

  ;; NOTE: init.el is automatically generated by emeowcs.org.
  ;; Do NOT edit this file, edit the Org file instead!
  
#+end_src

** File Clean-Up

Emacs seems to generate this ugly code and automatically append it to the end of your init.el. I find this to be quite annoying, so I redirect the output to a separate file instead.

#+begin_src emacs-lisp

  (setq custom-file (concat user-emacs-directory "custom.el"))
  ;;(load-file custom-file)

#+end_src

** Fix PATH variable

Add directories necessary for later functions to PATH variable.

#+begin_src emacs-lisp

  (setenv "PATH" (concat (getenv "PATH") ":~/.local/bin"))
  (setq exec-path (append exec-path '("~/.local/bin")))

  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))

#+end_src

* Package Management

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* UI Configuration

Make the UI more minimal and nicer to look at.

#+begin_src emacs-lisp

          ;; no startup screen
          (setq inhibit-startup-message t)

          ;; custom scratch buffer message
          (setq initial-scratch-message ";;       ／l、
;;     （ﾟ､ ｡７
;;       l、ﾞ~ヽ
;;       じしf_,)ノ
;; ~ Welcome to Emeowcs ~

")

          ;; hide some unnecessary ui elements
          (scroll-bar-mode -1)
          (tool-bar-mode -1)
          (tooltip-mode -1)
          (menu-bar-mode -1)

          ;; set transparency
          (add-to-list 'default-frame-alist '(alpha . 95))

#+end_src

** Font Configuration

I have to set up fonts in a bit of a hacky way for them to work while using the Emacs daemon.

*** Org Font Tweaks

#+begin_src emacs-lisp

  (defun meow/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . "14")
                    (org-level-2 . "14")
                    (org-level-3 . "14")
                    (org-level-4 . "14")
                    (org-level-5 . "14")
                    (org-level-6 . "14")
                    (org-level-7 . "14")
                    (org-level-8 . "14")))
      (set-face-attribute (car face) nil :font (concat "Iosevka Nerd Font-" (cdr face)) :weight 'regular))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

*** Font Setup

#+begin_src emacs-lisp

  (defun meow/font-setup ()
    ;; set default font
    (set-face-attribute 'default nil :font "Iosevka Nerd Font Mono-12")

    ;; set fixed pitch font
    (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font Mono-12")

    ;; set variable pitch font
    (set-face-attribute 'variable-pitch nil :font "Iosevka Nerd Font-12")

    (meow/org-font-setup))

  (add-hook 'after-init-hook 'meow/font-setup)
  (add-hook 'server-after-make-frame-hook 'meow/font-setup)

#+end_src

** Line Numbering

Since I use evil mode, I also use relative line numbers for ease of navigation.

#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)

  ;; don't show line numbers in specific modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Modeline

NOTE: When loading this config for the first time on a new system, you must run ~M-x all-the-icons-install-fonts~ in order for the modeline icons to display correctly.

#+begin_src emacs-lisp

  ;; modeline icons
  (use-package all-the-icons)

  ;; modeline
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 20)))

#+end_src

** Theme

#+begin_src emacs-lisp

    ;;(use-package doom-themes
    ;;  :init (load-theme 'doom-horizon t))

    (use-package autothemer
      :init (load-theme 'catppuccin-mocha t))

#+end_src

** Rainbow Delimiters

Helpful for keeping track of long chains of delimiters, especially in ELisp.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Menu Improvements

Improve menu completion and provide more info to make learning Emacs easier.

** Ivy + Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config (ivy-mode 1))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

* Keybindings

Make Emacs' keybindings a little more Vim-like.

#+begin_src emacs-lisp

  ;; change esc key to expected vim behavior
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; easy keymapping
  (use-package general
    :config
    (general-create-definer meow/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (meow/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  ;; vim keys to save my sanity
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

** Hydra

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (meow/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Git + Project Management

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Language Servers

#+begin_src emacs-lisp

  (defun meow/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . meow/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

** LSP UI

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

#+end_src

** LSP Treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

** LSP Ivy

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

** Python

The Python language server can be installed via ~pip install python-lsp-server~.

#+begin_src emacs-lisp

  (use-package python-mode
    :hook (python-mode . lsp-deferred))

#+end_src

** Lua

The Lua language server can be installed via ~M-x lsp-install-server lua-language-server~.

#+begin_src emacs-lisp

  (use-package lua-mode
    :hook (lua-mode . lsp-deferred))

#+end_src

** HTML/CSS

The HTML/CSS language servers can be installed via ~M-x lsp-install-server html-ls/css-ls~ (installing one also installs the other).

#+begin_src emacs-lisp

  ;; tries and fails to install package despite already being present?
  ;;(use-package html-mode
  ;;  :hook (html-mode . lsp-deferred))

  (use-package css-mode
    :hook (css-mode . lsp-deferred))

#+end_src

* Company Mode

Make completions better.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

* Org Mode

** Basic Configuration

#+begin_src emacs-lisp

  (defun meow/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . meow/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/orgfiles/rice-plans.org"))

    (meow/org-font-setup))

#+end_src

** Org Heading Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Centered Org Buffer

#+begin_src emacs-lisp

  (defun meow/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . meow/org-mode-visual-fill))

#+end_src

** Org Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (lua . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Auto-Tangle Configuration Files

#+begin_src emacs-lisp

  (defun meow/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/emeowcs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'meow/org-babel-tangle-config)))

#+end_src
